"Chronological information,""What is your highest education qualification?"",""How many years of experience do you have in software development?"",""How long have you been developing smart contracts?"",""What language do you use to develop smart contracts?"",""Main role in developing smart contracts."",""𝐂𝐒𝟏 - 𝐃𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞 𝐖𝐫𝐢𝐭𝐞𝐬. Modifying a variable's value several times could require much gas. To save gas, developers should overwrite variables outside cycles as much as possible.  Please consider the following code blocks showing the bad and good practice, respectively."",""Comment to CS1 (optional)"",""𝐂𝐒𝟐 - 𝐀𝐛𝐮𝐧𝐝𝐚𝐧𝐜𝐞 𝐨𝐟 𝐩𝐮𝐛𝐥𝐢𝐜 𝐦𝐞𝐦𝐛𝐞𝐫𝐬.  The order of the functions influences the gas consumption. Since the order of the functions is based on the method ID, this implies that the subsequent ordering can consume additional gas. Depending on the VM transaction, each position will have an additional gas fee. Since all public members participate in the sorting, reducing public members could save gas."",""Comment to CS2 (optional)"",""𝐂𝐒𝟑 - 𝐒𝐜𝐚𝐫𝐜𝐢𝐭𝐲 𝐨𝐟 𝐞𝐱𝐭𝐞𝐫𝐧𝐚𝐥 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬. Storing the input parameters in memory produces gas. For all public functions, the input parameters are copied to memory automatically. If a function is only called externally, it should be explicitly marked as external, in a way that these parameters are not stored into memory but are read from call data directly. This can save gas when the function input parameters are huge."",""Comment to CS3 (optional)"",""𝐂𝐒𝟒 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐢𝐧𝐢𝐭𝐢𝐚𝐥𝐢𝐳𝐚𝐭𝐢𝐨𝐧 𝐨𝐟 𝐯𝐚𝐫𝐢𝐚𝐛𝐥𝐞𝐬. An uninitialized variable is automatically set with its default value (e.g., a uint256 variable, when not initialized, it is assumed to have the default value 0). When declaring a variable, explicitly setting it with its default value is useless and wastes gas."",""Comment to CS4 (optional)"",""𝐂𝐒𝟓 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐥𝐢𝐛𝐫𝐚𝐫𝐢𝐞𝐬. When a public function of a library is called, the bytecode of that function is not made part of a client contract.  Thus, complex logic should be put in libraries for keeping the contract size small.  "",""Comment to CS5 (optional)"",""𝐂𝐒𝟔 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐢𝐧𝐭𝐞𝐫𝐧𝐚𝐥 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬. From inside a smart contract, calls to internal functions are cheaper than calls to public functions. A call to a public function implies that all the parameters are copied into memory and passed to that function. Conversely, a call to an internal function does not entail copying such parameters into memory again. For this reason the use of internal functions is preferable whenever possible, especially when the parameters are huge in numbers and size."",""Comment to CS6 (optional)"",""𝐂𝐒𝟕 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐦𝐞𝐦𝐨𝐫𝐲 𝐚𝐫𝐫𝐚𝐲𝐬. Whenever a developer has to make some internal computations in a solidity function with the help of an array, it may be preferable to avoid using storage, by employing memory  arrays. If the size of the array is exactly known, fixed size memory arrays can be used to save gas.  Please consider the following code blocks showing the bad and good practice, respectively."",""Comment to CS7 (optional)"",""𝐂𝐒𝟖 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐬𝐭𝐫𝐢𝐧𝐠𝐬. Using bytes32 is cheaper than using  the string type. If the length of the string can be limited to a certain number of bytes, bytes1 to bytes32 data types are preferable wherever possible."",""Comment to CS8 (optional)"",""𝐂𝐒𝟗 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐫𝐞𝐭𝐮𝐫𝐧 𝐯𝐚𝐥𝐮𝐞𝐬. A simple optimization in Solidity consists of naming the return value of a function. It is not needed to create a local variable then. Please consider the following code blocks showing the bad and good practice, respectively."",""Comment to CS9 (optional)"",""𝐂𝐒𝟏𝟎 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐠𝐥𝐨𝐛𝐚𝐥 𝐯𝐚𝐫𝐢𝐚𝐛𝐥𝐞𝐬.  Storing global variables in memory is expensive in terms of gas. Number and size of global variables should be minimized. "",""Comment to CS10 (optional)"",""𝐂𝐒𝟏𝟏 - 𝐔𝐧𝐛𝐨𝐮𝐧𝐝𝐞𝐝 𝐥𝐨𝐨𝐩𝐬. In general, loops should be avoided. If avoiding loops is not possible, it could be beneficial to try to avoid unbounded loops, i.e., loops where the upper limit of iterations is not defined."",""Comment to CS11 (optional)"",""𝐂𝐒𝟏𝟐 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐝𝐚𝐭𝐚 𝐭𝐲𝐩𝐞𝐬. Use bytes32 whenever possible, because it is the most optimized storage type. For example, storing a small number in a uint8 variable is not cheaper than storing it into a uint256 variable, as, for storing, any smaller data is padded with zeros to fill the 32 bytes, requiring additional operations from the EVM and additional gas. Please consider the following code blocks showing the bad and good practice, respectively. "",""Comment to CS12 (optional)"",""𝐂𝐒𝟏𝟑 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐢𝐧𝐝𝐞𝐱𝐞𝐝 𝐩𝐚𝐫𝐚𝐦𝐞𝐭𝐞𝐫𝐬. The indexed parameters in events have additional gas costs. It is preferable to only use the indexed qualifier for event parameters that should be searchable.  In the following code blocks, if the """"addr"""" parameter is not assumed to be sought, declaring it as indexed would only waste gas."",""Comment to CS13 (optional)"",""𝐂𝐒𝟏𝟒 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐬𝐭𝐫𝐮𝐜𝐭𝐬. Since many DApps use storage, it would be useful to reduce archiving costs in order to optimize gas costs. To do this, using structs is less expensive than using mapping.  Please consider the following code blocks showing the bad and good practice, respectively. "",""Comment to CS14 (optional)"",""𝐂𝐒𝟏𝟓 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐦𝐚𝐩𝐩𝐢𝐧𝐠𝐬. Mappings are cheaper than arrays. It is cheaper to use arrays only when smaller elements are used, such as uint8 that can be packed together. In other cases, arrays might cost more gas than mappings."",""Comment to CS15 (optional)"",""𝐂𝐒𝟏𝟔 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐞𝐱𝐭𝐞𝐫𝐧𝐚𝐥 𝐜𝐚𝐥𝐥𝐬. Every call to an external contract costs a decent amount of gas. For optimizing gas usage, it is better to call one function and have it return all the needed data rather than calling a separate function for every piece of data."",""Comment to CS16 (optional)"",""𝐂𝐒𝟏𝟕 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐛𝐨𝐨𝐥𝐞𝐚𝐧𝐬. Booleans (bool) are uint8 which means they use 8 bits of storage even if they can have only two values: True or False. When EVM packs the bools normally it can store only 32 bools in one memory slot. Otherwise, a set of 256 different booleans could be more efficiently packed in a single word by not declaring them as bool but uint256, using one bit for each boolean value.  Please consider the two  following code blocks. The first code block  illustrates how to get an individual boolean from a uint256, while the second one reports the function to set or clear a bool. "",""Comment to CS17 (optional)"",""𝐂𝐒𝟏𝟖 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐞𝐯𝐞𝐧𝐭𝐬. It is cheaper to store the data that is not required on-chain in events rather than variables."",""Comment to CS18 (optional)"",""𝐂𝐒𝟏𝟗 - 𝐈𝐧𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 𝐮𝐬𝐞 𝐨𝐟 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬. In Solidity, it could be preferable using fewer larger functions, rather than implementing multiple functions, each performing a single small task. Indeed, multiple smaller functions cost more gas and require more bytecode."",""Comment to CS19 (optional)"",""It is useful to have a suite of metrics for more easily identifying Solidity-specific code smells that could lead to a higher gas consumption while developing a smart contract."",""If such a suite of metrics exists, I would like to use it in my development process."",""Is there any other smell you have encountered in your practice you might want to be detected? If so, please describe it below.""";;;;
"2020/09/21 5:25:49 PM CET,""Bachelor Degree"",""Between 5 and 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""4"",""The compiler could optimize this depending on the complexity of the loop. Also gas cost depends on whether or not the variable is block-scoped or contract-scoped, the latter is much more expensive."",""2"",""I am not sure I understand the question. If the question is read: """"The sorting order of public methods affects gas cost"""", then I disagree since I have never heard that statement before. However if the question is read: """"The amount of public methods affects gas cost"""", then I agree since the size of a smart contract does influence  memory consumption."",""5"","""",""3"","""",""1"","""",""5"","""",""4"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"",""However this depends on the struct size. If it is a multiple of 32 bytes, like in the example shown, then it is very efficient."",""3"","""",""5"","""",""4"",""not sure if the overhead of calling the method is smaller than the benefit of the bool array"",""5"","""",""5"","""",""5"",""5"",""""";;;;
"2020/09/21 9:39:39 PM CET,""Bachelor Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Software Developer";"Product Owner"",""5"","""",""3"","""",""4"","""",""1"",""Automatically defaulting to 0 can be a useful feature in many use cases. I.e. (simple) defining timesCalled as 0 automatically and then increasing it by 1 with each call."",""4"",""Only when it makes sense to break out a set of functions/logic into a category (ownable, safemath, interfaces)"",""5"","""",""3"","""",""3"","""",""5"","""",""4"","""",""5"","""",""3"",""In some scenarios using 256 helps to prevent overflow attacks"",""5"","""",""5"","""",""3"","""",""5"","""",""2"",""While I wish it were more efficient here, bool is a universal and easy to interpret standard"",""3"","""",""5"","""",""5"",""5"",""Grazie!""";;;
"2020/09/21 10:38:34 PM CET,""Bachelor Degree"",""More than 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""2"",""It should no longer be a problem with latest fork"",""4"","""",""4"","""",""2"","""",""3"","""",""4"","""",""3"",""Example is wrong it doesn't compile with recent solidity versions."",""4"","""",""1"","""",""4"","""",""4"","""",""2"",""Gas optimization should be second to security and correctness"",""2"",""Indexed parameters exists for a reason. They should be used when they are useful"",""4"","""",""3"","""",""4"","""",""3"","""",""3"","""",""3"","""",""3"",""2"",""Following arbitrary rules without thinking""";;;;
"2020/09/22 12:36:42 AM CET,""Ph. D."",""Between 5 and 10 years"",""More than 3 years"",""Solidity"",""Researcher"",""4"","""",""4"",""Yes, I agree with it might increase the gas consumption. However, it might also increase the risk of vulnerabilities and difficulty of development. "",""5"","""",""3"",""I'm not sure whether it is correct. Since EVM will optimize the bytecode when compiling a smart contract source code to its bytecode, I think setting the variable's default value will not change contract's bytecode. So, the gas consumption is the same as the uninitialized variable. Maybe you should explicitly show how many gas you can save by this method to convince reviewers. "",""4"","""",""5"","""",""5"","""",""5"","""",""3"",""Readability is also very important for smart contracts. It might can save some gas, but it can reduce the readability. You should balance the readability and the gas consumption. "",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"",""5"",""I have similar works with you. They might help you. ";;;;
"Defining Smart Contract Defects on Ethereum"""", """"Towards saving money in using smart contracts"""", """"GasChecker: Scalable Analysis for Discovering Gas-Inefficient Smart Contracts"""", """"DEFECTCHECKER: Automated Smart Contract Defect Detection by Analyzing EVM Bytecode""""""";;;;
"2020/09/22 11:29:30 AM CET,""Bachelor Degree"",""More than 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer";Product Owner;"Manager"",""5"","""",""3"","""",""3"","""",""5"","""",""4"","""",""4"","""",""5"","""",""5"","""",""3"","""",""5"","""",""5"","""",""4"","""",""3"","""",""5"","""",""4"","""",""5"","""",""4"","""",""3"","""",""3"","""",""5"",""5"",""""";;
"2020/09/22 2:17:34 PM CET,""Bachelor Degree"",""Less than 5 years"",""Between 1 and 3 years"",""kotlin"",""Software Developer"",""1"","""",""2"","""",""4"","""",""1"","""",""3"","""",""1"","""",""5"","""",""4"","""",""4"","""",""4"","""",""5"","""",""5"","""",""3"","""",""4"","""",""4"","""",""4"","""",""3"","""",""3"","""",""4"","""",""5"",""4"",""""";;;;
"2020/09/22 2:23:27 PM CET,""Bachelor Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""4"","""",""3"","""",""5"","""",""5"","""",""4"","""",""4"","""",""4"","""",""4"","""",""4"","""",""4"","""",""3"","""",""3"","""",""4"","""",""5"","""",""4"","""",""3"","""",""4"","""",""3"","""",""4"","""",""5"",""5"",""""";;;;
"2020/09/22 2:53:01 PM CET,""Master Degree"",""Less than 5 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""4"","""",""3"",""I'd agree insofar as the number of variables should be kept to a minimum. The effects on gas costs due to function selector I would imagine are secondary to other savings I'd imagine."",""4"","""",""5"",""It's a super simple change that saves money so why not. Just put a comment above it if necessary."",""2"",""This has its place but can also reduce readability."",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"",""This is a severe security risk as it can halt contract operation."",""2"",""For a single variable such as this sure but if we have multiple then we can pack both variables into the same storage slot."",""5"","""",""5"",""Much easier to work with and reason about as well."",""3"",""Arrays and mappings do completely different jobs."",""5"","""",""1"",""Massively hampers readability. I would only consider this in exceptional circumstances"",""5"","""",""3"",""There comes a trade-off with readability which is very important."",""5"",""5"",""""";;;;
"2020/09/23 1:33:50 PM CET,""Master Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Testing"",""3"",""This situation is not common in developing's logic."",""3"","""",""3"",""Input should not be huge, I think."",""3"",""Yeah but maybe the compiler will consider it."",""4"",""Yes, we should do that."",""4"",""Yes, there should not be so much public functions if not necessary."",""5"",""Yes, storage access is really expensive."",""4"",""I'd like use more bytes32 cause a slot's size is bytes32."",""3"",""Maybe, I'm not so familiar with the difference."",""4"","""",""4"",""Yes, cause the contracts cannot be modified, we should avoid this."",""4"",""Yeah, due to the design of ethereum, but sometimes we cannot avoid to use it."",""3"",""Not familiar."",""3"",""Not common."",""3"",""Sry, my knowledge blind area."",""4"",""Yes, this is more related to structure design."",""4"",""Yes but not only appears to solidity."",""3"",""My bad, I don't know about this."",""3"",""It seems to be in conflict with CS16?"",""4"",""5"",""No thanks.""";;;;
"2020/09/23 2:35:01 PM CET,""Master Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""4"","""",""2"","""",""4"","""",""3"","""",""3"","""",""4"","""",""4"","""",""3"","""",""2"","""",""2"","""",""5"","""",""3"","""",""4"","""",""4"","""",""2"","""",""4"","""",""3"","""",""2"","""",""2"","""",""4"",""4"",""""";;;;
"2020/09/23 6:33:14 PM CET,""Ph. D."",""More than 10 years"",""Between 1 and 3 years"",""Solidity"",""education"",""3"",""Yes, SSTORE is way more expensive than MSTORE, and therefore it's a waste of gas to increment a storage variable in a loop. I just dislike the error-prone double usage of the literal 10 as the inherent connection is lost and one may alter the value in one spot but forget the other."",""4"",""The question is somewhat unclear. In the bytecode, the entry points for the functions (4 byte signatures)  are in a specific order. The ordering itself does not consume gas as this happens at compile time. Looking for the called entry point in the bytecode at execution time is what costs gas. So yes, reducing public members (entry points) saves the gas needed for successive comparisons of the first 4 bytes of calldata to the entry points in the bytecode. ";;;;
"Then again, a public function is a piece of code that is offered to the public to be called. If this functionality is needed, it should be there. If you don't need a piece of code to be called from outside the contract, it should not be public. "",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""1"",""This cripples readability. If this is of concern, the compiler should handle it."",""5"","""",""4"",""hm. External functions should return what's neccessary on a need to know basis. If the use case always requires several pieces of data at once, they should be delivered by a single function, yes. Using multiple internal functions is a matter of readabilty, and they should be optimized away by the compiler."",""4"",""4"",""""";;;;
"2020/09/23 11:25:30 PM CET,""Bachelor Degree"",""Between 5 and 10 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""3"","""",""3"","""",""4"","""",""3"","""",""2"","""",""3"","""",""4"","""",""4"","""",""4"","""",""5"","""",""3"","""",""4"","""",""4"","""",""3"",""It's good for structure, but I think it doesn't reduce cost that much (the SSTORE cost of going from zero to non-zero value)"",""4"","""",""5"","""",""3"","""",""3"","""",""4"","""",""4"",""4"",""""";;;;
"2020/09/24 12:21:41 PM CET,""Bachelor Degree"",""Less than 5 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""3"",""This is an example of bad practice in this contrived code.";;;;
"If 10 were a variable, or if conditionality were in the .../ or was anticipated, I would disagree it's bad practice, as the cost of inc in memory is low, and readability counts (the count may actually be counting something)."",""3"","""",""4"","""",""2"",""readability"",""5"","""",""4"",""but visibility should be locked down for more reasons than just efficiency!"",""5"","""",""5"","""",""3"",""benefit is minimal compared to readability"",""5"","""",""5"","""",""3"",""A far larger benefit is tightly packed storage of small types.";;;;
"But this is fine in the circumstances where it is a benefit."",""4"","""",""4"","""",""5"","""",""4"","""",""4"",""Sure, OK - if you have that many bools and you don't have overhead to index them for readability"",""4"",""Obviously depends on the use case. I've answered 'agree' on the assumption that the use case is one of the few where events are a suitable means of interrogating the chain, or where a variable is not expected to be checked after an interaction is completed."",""2"",""readability"",""4"",""4"",""Solidity itself is a better definition of 'code smell' than the inefficient practices described here.""";;;;
"2020/10/01 8:48:00 AM CET,""Ph. D."",""Between 5 and 10 years"",""More than 3 years"",""Solidity"",""Security researcher"",""3"",""I would not call this one bad practice, because:";;;;
- count is a local variable, which will be used in the stack. Writing the variable outside of the loop will save some stack operations, but it does not cost that much gas.;;;;
"- In """"good"""", count is increased by """"10"""". If the dev changes later the number of loop iteration, he might forget to change the increase of count, which can lead to a bug/vulnerability";;;;
;;;;
"If count was a state variable, I would tend to agree as the gas-saving would be significantly higher - though """"10"""" should be changed to a constant in both cases"",""4"",""I agree that you save some gas - though this is not the location where devs should worry too much about optimization as the cost/benefit is not so high"",""4"",""Note that slither has an inbuilt detectors for this: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external"",""1"",""Variable should always be explicitly initialized to improve the code readability. Otherwise it is difficult during a review to know if the intent for the variable was to be initialized to the default value, or if the variable is missing the initialization."",""2"",""With a library, you reduce the gas cost of deployment, but you increase the gas cost of executing the contract.";;;;
;;;;
"There is thus a trade-off, which depends on the application's context"",""4"",""Generally speaking, it is better to split the code into small internal function, as it increases the code readability, and allow to test portion of the code individually"",""5"",""Note that """"bad"""" will not compile anymore, you need the """"storage"""" keyword, and to initialize it to a storage variable ";")"",""3"",""This might reduce the code readability, and makes it more difficult to interact with other APIs as you might need type conversion"",""2"",""Imho named return variable should be avoided as they reduce the code readability, and are frequently the source of vulnerabilities.";;;
;;;;
We often find codebases where the return variable is never written, and the function returns default value.;;;;
;;;;
"The few gas cost saved does not justify the decrease in code readability."",""3"",""I am not sure what you mean by global variable here?";;;;
;;;;
"If its about storing state variables in memory, it is a good practice if you are going to read them multiple times."",""5"",""Unbounded loops are frequently the cause of issues - specially if the loop bound is controlled by arbitrary users"",""3"",""This depends if the compiler has the opportunity to pack together the variables, and if the variables are used together.";;;;
;;;;
"I disagree with the statement """"Use bytes32 whenever possible"""", as this decreases the code readability."",""4"","""",""4"",""This is also a better design as it fits the intended behavior - one lookup gives you all the information"",""3"",""I think the selection between an array and a mapping should not be done with respect to the gas cost, but with respect to the data model."",""5"","""",""1"",""This significantly decreases the code readability. I don't think it is worth saving gas if it impacts that much the code readability."",""4"","""",""1"",""Splitting the code into smaller parts improve the code readeability and ease the tests of individual components.";;;;
Devs should aim to create small functions with a clear purpose, rather than complex functions difficult to review and to test.;;;;
;;;;
"This is another case where the gas saving does not justify the decrease in code readeability imho."",""4"",""4"",""""";;;;
"2020/10/07 1:12:35 PM CET,""Master Degree"",""Less than 5 years"",""Between 1 and 3 years"",""Solidity"",""Research"",""4"",""I agree.";;;;
"If the variable is in """"storage"""" it does matter a lot.";;;;
"If the variable is in """"memory"""" the difference is less obivious for i that goes to N relatively small. For instance, with N == 100K, the two executions cost respectively about 700K and 500K units of gas (the second case I have used an empty loop)."",""3"",""I know this artifact, but I have never though about reducing the public state variables so that the public functions have a """"smaller"""" method ID.";;;;
"However, if you need to read that variables you need to include additional functions to read them anyway (since you are not relying on the public keyword). However, I think that the bytecode of the contract will grow more, then increasing its deployment cost. I give 3 to this question because I think it depends on the case you need to reduce the function call cost, or the deployment cost."",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"",""About the size I think it is tricky. As far as I know, Solidity works natively with uint256, so doing operations on  uint32 have slightly higher cost in gas because of additional EVM steps. The smaller sizes are encouraged to be used when there are multiple that can be packed in a struct. "",""5"","""",""5"","""",""5"","""",""5"","""",""4"",""Agree, but arrays can be iterated, mappings not  (unless the keyset is an incremental ID or similar)."",""5"","""",""4"","""",""4"","""",""3"",""I think it depends on the usage.";;;;
"If a small function is invoked a lot of times through the life of the contract, while the deployment only once, it is better to make the function call cheaper than the deplyment. The opposite otherwise."",""5"",""4"",""The usage of interfaces and not the specific contract type, e.g.";;;;
"https://ethereum.stackexchange.com/questions/45290/import-in-solidity-does-it-affect-the-gas""";;;;
"2020/10/08 8:54:07 AM CET,""Bachelor Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""2"","""",""2"","""",""4"","""",""1"","""",""3"","""",""2"","""",""2"","""",""1"","""",""2"","""",""4"","""",""5"","""",""4"","""",""4"","""",""4"","""",""4"","""",""3"","""",""4"","""",""2"","""",""2"","""",""3"",""2"",""""";;;;
"2020/10/08 8:44:47 PM CET,""Master Degree"",""Between 5 and 10 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""4"","""",""4"","""",""5"","""",""3"",""This significantly reduces code readability"",""4"","""",""5"","""",""5"","""",""4"",""I agree, but this may reduce readability"",""4"","""",""5"","""",""5"","""",""3"","""",""4"","""",""5"","""",""5"","""",""5"","""",""3"","""",""4"","""",""4"","""",""5"",""5"",""""";;;;
"2020/10/12 4:36:19 AM CET,""Half a bachelor's degree"",""More than 10 years"",""More than 3 years"",""Solidity"",""Software Developer";Product Owner;"Manager"",""5"","""",""4"","""",""5"","""",""1"",""Statically initialising a variable to its default value should be caught by the compiler and reduced to a no-op."",""2"",""People rarely use libraries with public functions because of the difficulty of managing their deployment."",""2"",""Developers should use internal functions any time they don't need to be public following the principle of having a clean API, not because it saves gas."",""1"",""The former snippet will raise an error in Solidity, as you have to explicitly state storage or memory. I don't think anyone is accidentally using storage arrays for temporary computation."",""2"",""This should say """"if the string is fixed-length and less than 32 bytes""""";" otherwise some way to indicate the length of the string is required."",""1"",""This is a stylistic change, and one that in my opinion reduces readability in many cases. It also doesn't save gas."",""2"",""Global variables are bad because of the impact they have on readability, not because of gas costs."",""3"",""This recommendation is very general and hard to follow. Most loops are used for iteration and thus limited to what they're iterating over, in which case they are self-constrained. A directive to think about runtime and what affects the number of iterations might be more useful."",""1"",""Using smaller types often does not save gas, but nor does it usually cost gas. When you know the type will be constrained to a smaller range, using a smaller type helps convey that information. Also, the start of the entry mentions `bytes32`, but the text is only about `uint256`."",""5"","""",""1"",""I don't believe this is actually true. The latter is more readable, but any gas savings are minimal."",""2"",""Usually this choice is made based on the requirements of the code - arrays and maps have different, largely non-overlapping use-cases."",""3"",""This would be more useful if rephrased from the POV of the person writing the API - provide APIs that return collections of useful data in a single call. As an API consumer, you have no choice but to use what you were provided."",""3"",""The return statement in the first snippet could be rewritten more clearly as `return flag == 1`."",""2"",""Storage implies retrieval";" this would be clearer if it was worded to say that you should avoid storing data you don't need to retrieve inside the contract, and log it in an event instead."",""2"",""This discourages good coding practices of modularisation and small, well-contained functions."",""4"",""3"","""""
"2020/10/12 10:07:03 AM CET,""Bachelor Degree"",""Between 5 and 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""5"","""",""4"","""",""5"","""",""3"","""",""4"","""",""5"","""",""4"","""",""3"","""",""4"","""",""4"","""",""5"","""",""3"","""",""4"","""",""5"","""",""4"","""",""5"","""",""2"","""",""4"","""",""4"","""",""5"",""4"",""""";;;;
"2020/10/12 7:14:28 PM CET,""Bachelor Degree"",""Between 5 and 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""5"","""",""4"","""",""5"","""",""4"","""",""4"","""",""5"","""",""4"","""",""3"","""",""4"","""",""5"","""",""5"","""",""3"","""",""4"","""",""5"","""",""4"","""",""5"","""",""3"","""",""4"","""",""4"","""",""5"",""5"",""""";;;;
"2020/10/13 12:39:50 PM CET,""Master Degree"",""More than 10 years"",""More than 3 years"",""Solidity"",""Software Developer";"Product Owner"",""2"",""not sure if gas cost occur only once at the end when the transaction is committed/done.."",""4"",""sounds reasonable to reduce public members.. I would differentiate between transaction calls and deployment.. not sure how this differs here"",""4"",""what do you mean by """"produces gas""""? do you mean consumes?"",""5"",""uninitialized and setting to its default value should result in the same storage state but I guess this is an optimization of the EVM not yet implemented (I guess this is true for many other gas comsumption issues)"",""5"",""sounds absolutely reasonable.. it has to be taken into account if the public library is a proxy contract as it could be updated and your own smart contract could stop working in the future or there could be a function added that consumes way more gas than before"",""4"",""yes but deployment cost have to be considered as they might be higher"",""4"","""",""4"","""",""2"",""feels like this is only syntactic sugar, but I don't know the internals"",""4"","""",""5"","""",""4"",""wow, didn't know that. An example value for bytes32 would be very interesting!"",""4"","""",""3"",""I guess this heavily depends on the used data types.."",""4"","""",""4"",""yes, but could be impossible for oracle calls"",""5"",""oh yes, bit-fiddling-concepts are an amazing source for gas saving tactics ";")"",""5"","""",""3"",""bold statement.. not sure if this holds true for all cases"",""5"",""5"",""""";;
"2020/10/13 1:05:42 PM CET,""Master Degree"",""More than 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""4"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""4"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"",""5"",""""";;;;
"2020/10/13 1:40:55 PM CET,""Bachelor Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""3"","""",""4"","""",""2"","""",""3"","""",""2"","""",""5"","""",""5"","""",""2"","""",""2"","""",""4"","""",""3"","""",""5"","""",""2"","""",""1"","""",""2"","""",""1"","""",""4"","""",""4"","""",""3"","""",""2"",""5"",""""";;;;
"2020/10/13 8:41:07 PM CET,""Master Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""4"","""",""5"","""",""4"","""",""5"","""",""4"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"",""5"",""""";;;;
"2020/10/19 7:42:22 AM CET,""Under-Graduate"",""Less than 5 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""5"",""If the count variable won't be used inside the for loop, then I strongly agree"",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"","""",""5"",""5"",""""";;;;
"2020/10/21 12:09:36 AM CET,""Master Degree"",""Between 5 and 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer";"Testing"",""4"","""",""5"","""",""5"","""",""4"",""It saves gas but also degrades readability "",""3"","""",""5"","""",""5"",""JFYI The bad version doesn't compile anymore with the latest versions of Solidity  "",""4"",""It's cheaper using bytes32 instead of strings, but this could negatively impact code readability."",""5"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""4"","""",""4"","""",""3"","""",""4"","""",""4"","""",""4"",""4"",""""";;;
"2020/10/22 9:12:49 AM CET,""Ph. D."",""More than 10 years"",""Less than 1 years"",""Solidity"",""Manager"",""5"","""",""3"","""",""3"","""",""4"","""",""4"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""5"","""",""3"","""",""3"","""",""4"","""",""5"","""",""5"","""",""3"","""",""4"","""",""5"","""",""4"",""4"",""""";;;;
"2020/10/22 3:33:20 PM CET,""Some university, no degree"",""More than 10 years"",""More than 3 years"",""Solidity and C++"",""Software Developer"",""2"",""I see this very rarely"",""4"",""This should be fixed at the Ethereum or Solidity compiler level. Having more complex smart contracts is important. "",""4"",""This would also be nice to get the compiler to realise it’s not used internally and swap to external. "",""4"",""This should be handled by the compiler. "",""1"",""Libraries cause all sorts of issues with tooling outside of the compiler, we try to avoid them if possible. "",""4"","""",""4"",""This is poor syntax on Solidity’s part"",""5"",""Also bytes4 is more expensive than bytes32, which is surprising. "",""4"",""Again an optimisation the compiler should do. "",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""3"",""Because you can’t iterate a mapping it’s often not possible to swap over. "",""4"","""",""3"",""Also a compiler optimisation that could be used. "",""3"",""Depends. Are they indexed?"",""1"",""Security and readability is more important than gas usage in most cases. "",""5"",""3"",""Flattening and modifiers are usually code smells. """;;;;
"2020/10/23 8:36:22 AM CET,""Ph. D."",""Between 5 and 10 years"",""Less than 1 years"",""Solidity"",""Software Developer"",""2"",""the second code is more error-prone. I would consider to first write in the first style and the refactor, possibly automatically, in the second style"",""3"",""I was not aware about this difference"",""4"","""",""2"","""",""3"",""what is not in the contract code is not transparent on the blockchain"",""4"","""",""4"","""",""4"","""",""4"","""",""5"","""",""5"","""",""4"","""",""4"","""",""5"","""",""4"","""",""3"","""",""3"","""",""4"","""",""2"",""it is important to keep the business logic clear, for transparency and verification reasons"",""5"",""4"",""""";;;;
"2020/10/23 9:39:45 AM CET,""Ph. D. Student"",""Less than 5 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""2"","""",""3"","""",""5"","""",""2"","""",""5"","""",""4"","""",""5"","""",""4"","""",""4"","""",""5"","""",""4"","""",""4"","""",""4"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""5"","""",""4"",""4"",""""";;;;
"2020/10/25 6:44:47 PM CET,""Master Degree"",""Less than 5 years"",""Less than 1 years"",""Solidity"",""I developed smart contracts as part of my Master's Thesis"",""5"","""",""3"",""Reducing public members is a software engineering best practice for several reasons. The goal of reducing gas should surely be a motive for it, but not the main one."",""4"",""Marking a function as external makes that function available to be called from other contracts via transactions. Hence, the choice has a strong impact on the contract interface. Just considering the gas could be limiting, but I agree on this best practice. "",""4"",""Setting a variable to its default value also introduces redundancy in the code, so I agree on this. Default values should be stable though, as otherwise retro-compatibility would be broken. As a side note, adding a small comment to document the default value might be helpful."",""4"","""",""5"",""Contracts can always be refactored to leverage a higher usage of internal functions to centralize the behavior or one or more public function. This practice also increases the readability of the code."",""5"",""It is always preferable to use memory to perform intermediate computation and then store results in storage. This surely include this case, where memory could be used to decrease the gas consumption."",""5"","""",""5"",""This also helps reducing the size of a contract, although of a small factor. "",""5"",""Global variables should be avoided whenever possible as a software engineering best practice."",""5"","""",""2"",""I always prefer to use more specific datatypes. In this case, the choice of using uint256 should come with more checks to make sure the actual value lies in the desired range. Such values might negatively affect gas consumption."",""5"","""",""5"",""This also introduces a more specific datatype which makes the code more readable. Furthermore, it simplifies the data retrieval."",""4"","""",""5"",""This also helps simplify the interaction among contracts, as all the relevant data will be returned as a result of a single function call, making the code more readable and maintainable."",""3"",""This will make the code less readable and more complex to understand, so the benefit in terms of gas consumption should be carefully evaluated."",""2"","""",""3"","""",""5"",""5"",""""";;;;
"2020/10/26 6:06:41 PM CET,""Ph. D."",""More than 10 years"",""Between 1 and 3 years"",""Solidity"",""Teacher"",""5"","""",""2"",""In theory it may save gas. But: (1) Since some time, the Solidity compiler uses binary search to locate the function body, so each call requires ld(n) comparisons, where n is the number of publicly visible entry points. So the overhead of some additional functions is small. (2) Moreover, view functions are usually executed off-chain by the client, so no gas is needed at all. And (3), the gas costs of the comparisons are low."",""4"",""Why is this a matter of opinion? It seems to be the case that this is still something the programmer has to take care of. Basically, the compiler could decide whether a function needs to be public and choose an appropriate location for the parameters."",""4"",""In principle, the initialization is redundant. But how well do programmers know the intrinsics of Solidity, and how much do they trust the compiler? Moreover, redundant variable initializations could be optimized away by the compiler. It should be nothing the programmer has to worry about."",""1"",""It depends on how oftern the functions are called, how much code is moved to the libary and how many contracts will use the same library. Calls to an external library (payed with each call) may become more expensive than the deployment costs (payed once)."",""5"","""",""3"",""This question probably refers to an old version of Solidity. In current versions the """"bad"""" version is no longer admissible, one has to specify a memory location for the array. If the programmer specifies storage instead of memory, s/he probably knows why."",""5"","""",""1"",""These two variants are equivalent, solc generates the same code. So it is a matter of taste whether an explicit return is better readable or the naming of the return variable."",""5"","""",""5"","""",""2"",""It depends. If you have two public uint128 variables, they can be packed into a single word, which saves maybe more gas than the little bit you lose. So depending on the number of calls any version can be better than the other  one. Basically this is something the compiler should decide based on the optimization settings (number of runs to optimize for). What is more important is that choosing a variable size that is too small (e.g. uint8) may lead to overflows that are more costly than the savings you maybe get."",""5"",""But then, the savings are small, and the programmer should rather worry about getting the logic right."",""5"","""",""3"",""Haven't thought about this yet."",""5"","""",""3"",""Doesn't it depend on the context whether the effort of packing boolean values pays off? "",""3"",""Haven't yet thought about this option. "",""3"",""Is this function about private/internal functions or public/external ones? I'd expect that sooner or later the difference in coding style doesn't matter as the compiler should optimize the calls."",""3"",""3"",""The problem of metrics is that they may become quickly outdated when the compiler changes they way it generates bytecode. Moreover, there is a tradeoff in writing clear code and spending one's intelligence on the logic on the one hand and coding for efficency on the other hand. Most issues mentioned here should be handled by the compiler.""";;;;
"2020/10/29 9:24:24 AM CET,""Master Degree"",""Between 5 and 10 years"",""Between 1 and 3 years"",""Solidity"",""Software Developer"",""4"","""",""2"","""",""4"","""",""5"","""",""5"","""",""5"","""",""4"","""",""4"","""",""4"","""",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""4"","""",""5"","""",""3"","""",""5"","""",""5"","""",""5"",""5"",""""";;;;
"2020/10/30 5:50:52 AM CET,""Some university, no degree"",""More than 10 years"",""More than 3 years"",""Solidity and C++"",""Software Developer"",""2"",""I see this very rarely"",""4"",""This should be fixed at the Ethereum or Solidity compiler level. Having more complex smart contracts is important. "",""4"",""This would also be nice to get the compiler to realise it’s not used internally and swap to external. "",""4"",""This should be handled by the compiler. "",""1"",""Libraries cause all sorts of issues with tooling outside of the compiler, we try to avoid them if possible. "",""4"","""",""4"",""This is poor syntax on Solidity’s part"",""5"",""Also bytes4 is more expensive than bytes32, which is surprising. "",""4"",""Again an optimisation the compiler should do. "",""5"","""",""5"","""",""5"","""",""4"","""",""5"","""",""3"",""Because you can’t iterate a mapping it’s often not possible to swap over. "",""4"","""",""3"",""Also a compiler optimisation that could be used. "",""3"",""Depends. Are they indexed?"",""1"",""Security and readability is more important than gas usage in most cases. "",""5"",""3"",""Flattening and modifiers are usually code smells. """;;;;
